name: Deploy Preview

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - workspace: meechain-dapp
            network: mainnet
          - workspace: hexchain-dapp
            network: mainnet
          - workspace: token-dashboard
            network: mainnet

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Validate config
        id: validate
        run: |
          node scripts/validate-config.js ${{ matrix.workspace }} ${{ matrix.network }} || echo  "set-output name=fallback::true"

      - name: Set subdomain
        run: |
          if [[ "${{ steps.validate.outputs.fallback }}" == "true" ]]; then
            echo "SUBDOMAIN=fallback.${{ matrix.network }}" >> $GITHUB_ENV
          else
            echo "SUBDOMAIN=${{ matrix.workspace }}.${{ matrix.network }}" >> $GITHUB_ENV
          fi

      - name: Build workspace
        run: npm run build --workspace=${{ matrix.workspace }}

      - name: Configure Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./packages/${{ matrix.workspace }}/dist
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          subdomain: ${{ env.SUBDOMAIN }}

// scripts/validate-config.ts
import fs from 'fs'
import path from 'path'
import { z } from 'zod'

const workspace = process.argv[2]
const network = process.argv[3] || 'mainnet'
const configPath = path.resolve(__dirname, `../configs/${workspace}/${network}.json`)
const fallbackPath = path.resolve(__dirname, `../configs/fallback/${network}.json`)
const ConfigSchema = z.object({ rpcUrl: z.string().url(),
contractAddress: z.string().min(1),
apiKey: z.string().min(1),
   // เพิ่ม field ตามที่จำเป็น })

function loadConfig(filePath: string) { if (!fs.existsSync(filePath))
return null const raw = fs.readFileSync(filePath, 'utf-8') return JSON.parse(raw)
}
  const config = loadConfig(configPath)
  const fallback = loadConfig(fallbackPath) try { ConfigSchema.parse(config)
  console.log(`✅ Valid config for ${workspace}/${network}`) 
} 
  catch (err) { if (fallback) {
  console.warn(`⚠️ Invalid config for ${workspace}/${network}, 
  using fallback`) 
fs.writeFileSync(configPath, JSON.stringify(fallback, null, 2)) 
}
else { console.error(`❌ No valid config or 
fallback for ${workspace}/${network}`) process.exit(1) 
  } 
}
